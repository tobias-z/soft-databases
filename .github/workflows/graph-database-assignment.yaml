on:
  push:
    branches:
      - main
      - develop
    paths:
      - graph-databases-assignment/**

name: Build and Test

permissions:
  contents: read

defaults:
  run:
    working-directory: graph-databases-assignment

jobs:
  test:
    name: Test
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@ac593985615ec2ede58e132d2e21d2b1cbd6127c # v3.3.0

      - name: Setup rust
        uses: ./.github/actions/setup-rust

      - name: Start test containers
        run: docker compose up -d

      - name: Ensure containers are ready
        run: timeout 60s sh -c 'until docker ps | grep neo4j | grep -q healthy; do echo "Waiting for container to be healthy..."; sleep 2; done'

      - name: Install nextest
        uses: taiki-e/install-action@ddfbd2cab72fd94842c80ade93f28fe7ee9c71f8

      - name: Run cargo test
        shell: bash
        run: cargo nextest run --workspace
  check:
    name: Check
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@ac593985615ec2ede58e132d2e21d2b1cbd6127c # v3.3.0

      - name: Setup rust
        uses: ./.github/actions/setup-rust

      - name: Start test containers
        run: docker compose up -d

      - name: Ensure containers are ready
        run: timeout 60s sh -c 'until docker ps | grep neo4j | grep -q healthy; do echo "Waiting for container to be healthy..."; sleep 2; done'

      - name: Run cargo build
        shell: bash
        run: cargo build --workspace

      - name: Run cargo clippy
        shell: bash
        run: cargo clippy --workspace

      - name: Run format check
        shell: bash
        run: cargo fmt --check
  deploy:
    name: Deploy
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main'
    needs:
      - test
      - check
    steps:
      - uses: actions/checkout@ac593985615ec2ede58e132d2e21d2b1cbd6127c # v3.3.0

      - name: deploy to docker up and server
        env:
          DOCKER_USERNAME: tobiaszimmer
          DOCKER_PASSWORD: ${{ secrets.DOCKER_PASSWORD }}
          GITURL: https://github.com/${{ github.repository }}
          TOKEN: ${{ secrets.TOKEN }}
          SERVER_URL: ${{ secrets.SERVER_URL }}
        if: ${{ github.event_name != 'pull_request' }}
        run: |
          version=$(head "Cargo.toml" | grep version | head -n 1 | tr 'version = "' " " | xargs | awk '{print tolower($0)}')
          project_name=$(head "Cargo.toml" | grep name | head -n 1 | sed 's/"//g' | sed 's/name = //g' | xargs | awk '{print tolower($0)}')
          echo "$DOCKER_PASSWORD" | docker login --username $DOCKER_USERNAME --password-stdin
          app_image_name="$DOCKER_USERNAME/$project_name:$version"
          neo4j_image_name="$DOCKER_USERNAME/$project_name:$version-neo4j"
          docker build --tag "$app_image_name" .
          docker build -f neo4j.Dockerfile --tag "$neo4j_image_name" .
          docker push "$app_image_name"
          docker push "$neo4j_image_name"
          curl --request POST \
            --url $SERVER_URL/simple-cd/deploy \
            --header 'Content-Type: application/json' \
            --data "{\"name\": \"$project_name\", \"giturl\": \"$GITURL\", \"token\": \"$TOKEN\", \"downdir\": \"graph-databases-assignment\", \"invalidate_images\": [\"$app_image_name\", \"$neo4j_image_name\"], \"project_version\": \"$version\"}"
